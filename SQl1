                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      SQL                         ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Data is a collection of a distinct small unit of information. It can be used in a variety of forms like text,
numbers, media, bytes, etc. it can be stored.

A database is an organized collection of data, so that it can be easily accessed and managed.

MySQL is a relational database which holds the data and SQL is a way to communicate with MySQL.


                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                 Goorm IDE                        ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

mysql-ctl cli 

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+

CREATE DATABASE Workflow;

Query OK, 1 row affected (0.00 sec)
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| workflow           |
+--------------------+

mysql> use workflow;
Database changed


---To See you current database---
mysql> SELECT database();
+------------+
| database() |
+------------+
| workflow   |
+------------+
1 row in set (0.00 sec)



                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                  CREATING TABLE                  ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


 CREATE TABLE employee(
     firstname varchar(20) ,
     middlename varchar(20),
     lastname varchar(20),
     age int,
     salary int,
     location varchar(20)
);

mysql> describe employee;

+------------+-------------+------+-----+---------+-------+
| Field      | Type        | Null | Key | Default | Extra |
+------------+-------------+------+-----+---------+-------+
| firstname  | varchar(20) | YES  |     | NULL    |       |
| middlename | varchar(20) | YES  |     | NULL    |       |
| lastname   | varchar(20) | YES  |     | NULL    |       |
| age        | int(11)     | YES  |     | NULL    |       |
| salary     | int(11)     | YES  |     | NULL    |       |
| location   | varchar(20) | YES  |     | NULL    |       |
+------------+-------------+------+-----+---------+-------+
6 rows in set (0.00 sec)


mysql> drop table employee;
Query OK, 0 rows affected (0.08 sec)

mysql> show tables;
Empty set (0.00 sec)


mysql> DROP DATABASE  workflow;
Query OK, 0 rows affected (0.00 sec)

mysql> SELECT database();
+------------+
| database() |
+------------+
| NULL       |
+------------+
1 row in set (0.00 sec)



mysql>CREATE DATABASE trendytech;
Query OK, 0 rows affected (0.00 sec)

 CREATE TABLE trendytech.employee
     (
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int not null,
     salary int,
     location varchar(20) NOT NULL
     );

---We are not inside trendytech but still using database name and dot, we can make table inside it------ 

mysql> SELECT database();
+------------+
| database() |
+------------+
| NULL       |
+------------+
1 row in set (0.00 sec)

=======================================================================================================================================================

                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                     CRUD                         ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

mysql>use trendytech;
 
 CREATE TABLE employee
     (
     firstname varchar(20),
     middlename varchar(20),
     lastname varchar(20),
     age int,
     salary int,
     location varchar(20)
     );


SELECT*FROM employee;
Empty set (0.00 sec)

mysql> INSERT INTO employee(firstname,middlename,lastname,age,salary,location) VALUES('Kapil','Kumar','sharma',21,12000,'Banglore');
Query OK, 1 row affected (0.02 sec)


mysql> SELECT*FROM employee;
+-----------+------------+----------+------+--------+----------+
| firstname | middlename | lastname | age  | salary | location |
+-----------+------------+----------+------+--------+----------+
| Kapil     | Kumar      | sharma   |   21 |  12000 | Banglore |
+-----------+------------+----------+------+--------+----------+
1 row in set (0.00 sec)


---Note---
This method is also valid but not preffered.
mysql> INSERT INTO employee VALUES('Kapil','Kumar','sharma',21,12000,'Banglore');

What if someone dosent have a middlename?
Buy first method you can simply skip the middlename,but here you cannot skip it as you are not defining anything.(ERROR will be thrown).

---Note---
-- 'rajes'h' - error;
-- "rajes'h" - works;
-- 'rajes\'h' -works;


We can add more value if we want with the help of comma.


mysql> INSERT INTO employee(firstname,middlename,lastname,age,salary,location) VALUES('Kapil','Kumar','sharma',21,12000,'Banglore'),
('Kushager','Kumar','Singh',23,129000,'Delhi');

---Note--
You cannot give value greater than specified like firstname cannot be greater than 20.
else you will get error.

If you want important values to be not null ,you can use NOT NULL keyword. 

 CREATE TABLE employee
     (
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int not null,
     salary int,
     location varchar(20) NOT NULL
     );


INSERT INTO employee(firstname,lastname,age,salary,location) VALUES('Yash',"Pathak",21,1200000,'Banglore'),('honey','singh',
1000000,'noida');

mysql> select* from employee;
+-----------+------------+----------+-----+---------+----------+
| firstname | middlename | lastname | age | salary  | location |
+-----------+------------+----------+-----+---------+----------+
| Yash      | NULL       | Pathak   |  21 | 1200000 | Banglore |
| honey     | NULL       | singh    |  22 | 1000000 | noida    |
+-----------+------------+----------+-----+---------+----------+


Suppose there are majority of people from banglore only then you can make location as default so that even a employee forgets to fill his location it
is banglore by default. 

 CREATE TABLE employee
     (
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int NOT NULL,
     salary int,
     location varchar(20) DEFAULT 'banglore'
     );


======================================================================================================================================================

                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      PRIMARY KEY                 ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Concept of primary Key:
Imagine we have two guys with same names ,how will we uniquely identify them?We can take help of primary key.


INSERT INTO employee(firstname,lastname,age,salary) VALUES('rajesh','sharma',28,1000),('rajesh','sharma',28,1000);

mysql> SELECT * from employee;
+-----------+------------+----------+-----+--------+----------+
| firstname | middlename | lastname | age | salary | location |
+-----------+------------+----------+-----+--------+----------+
| rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
| rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
+-----------+------------+----------+-----+--------+----------+


mysql> drop table employee;
Query OK, 0 rows affected (0.04 sec)


Lets create a primay key to achieve what we want.
 
 CREATE TABLE employee
     (
     id INT PRIMARY KEY,
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int NOT NULL,
     salary int,
     location varchar(20) DEFAULT 'banglore'
     );

     
mysql> desc employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(20) | NO   |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | YES  |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | YES  |     | NULL     |       |
| location   | varchar(20) | YES  |     | banglore |       |
+------------+-------------+------+-----+----------+-------+

Now you cannot give same value to parameter which is a primary key.

INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(1,'rajesh','sharma',28,1000),(1,'rajesh','sharma',28,1000);
ERROR 1062 (23000): Duplicate entry '1' for key 'PRIMARY'

     
INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(1,'rajesh','sharma',28,1000),(2,'rajesh','sharma',28,1000);

mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+


Primary key cannot be same for more than 1 value and also cannot be NULL. 

INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(NULL,'rajesh','sharma',28,1000);
ERROR 1048 (23000): Column 'id' cannot be null

Note:
A value will be a good candidate for primary key on basis of which you want to uniquely identify something.(curtomerID,RollNo,ID);


Another way of creating a primary Key.

CREATE TABLE employee
     (
     id INT,
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int NOT NULL,
     salary int,
     location varchar(20) DEFAULT 'banglore',
     PRIMARY KEY(id)
     );

---Concatination of rows---
You can also have  primary key on combination of 2 value like this : PRIMARY KEY(id,age);


Using auto increment.(Very good candidate for primary key)
Suppose you have 10 employees and you want to give 11 id to new employee. Remembering this can be trippy so we can take help of auto increment.

mysql> drop table employee;
Query OK, 0 rows affected (0.04 sec)

CREATE TABLE employee
     (
     id INT AUTO_INCREMENT,
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20),
     age int NOT NULL,
     salary int,
     location varchar(20) DEFAULT 'banglore',
     PRIMARY KEY(id)
     );

mysql> desc employee;
+------------+-------------+------+-----+----------+----------------+
| Field      | Type        | Null | Key | Default  | Extra          |
+------------+-------------+------+-----+----------+----------------+
| id         | int(11)     | NO   | PRI | NULL     | auto_increment |
| firstname  | varchar(20) | NO   |     | NULL     |                |
| middlename | varchar(20) | YES  |     | NULL     |                |
| lastname   | varchar(20) | YES  |     | NULL     |                |
| age        | int(11)     | NO   |     | NULL     |                |
| salary     | int(11)     | YES  |     | NULL     |                |
| location   | varchar(20) | YES  |     | banglore |                |
+------------+-------------+------+-----+----------+----------------+

INSERT INTO employee(firstname,lastname,age,salary) VALUES('rajesh','sharma',28,1000),('rajesh','sharma',28,1000),
('Himanshu','Honey',25,2000),('Yaman','Saini',20,12000);

Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0


mysql> select* from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  3 | Himanshu  | NULL       | Honey    |  25 |   2000 | banglore |
|  4 | Yaman     | NULL       | Saini    |  20 |  12000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+

You can give id if you want.
mysql> INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(6,'rajesh','sharma',28,1000);
Query OK, 1 row affected (0.01 sec)

mysql> select*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  3 | Himanshu  | NULL       | Honey    |  25 |   2000 | banglore |
|  4 | Yaman     | NULL       | Saini    |  20 |  12000 | banglore |
|  6 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+
5 rows in set (0.00 sec)


                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      UNIQUE KEY                  ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Unique Key: holds unique values,just like primary key.

But you can have only one primary key(composite is considered one) and primary key cannot be null,but unique key can hold null value.
(in mysql we can have any number of null but in some databases it holds only one NULL value)


Primary Key vs Unique Key

We should use Primary key when we have to uniquely identify each record and Unique key when we want our column to have unique values.
Email Id:We do not want someone to uniquely identify by email id,but email id should be diffrent so it can be a unique key not a primary key. 
So purpose of unique key is that no values are same.


CREATE TABLE employee
     (
     firstname varchar(20) NOT NULL,
     lastname varchar(20) NOT NULL,
     age int NOT NULL,
     PRIMARY KEY(firstname,lastname)
     );


mysql> desc employee;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| firstname | varchar(20) | NO   | PRI | NULL    |       |
| lastname  | varchar(20) | NO   | PRI | NULL    |       |
| age       | int(11)     | NO   |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+
3 rows in set (0.00 sec)


mysql> INSERT INTO employee values('kapil','sharma',28);
Query OK, 1 row affected (0.01 sec)

---Concatinated primary key---
mysql> INSERT INTO employee values('kapil','sharma',28);
ERROR 1062 (23000): Duplicate entry 'kapil-sharma' for key 'PRIMARY'

mysql> INSERT INTO employee values('kushagaer','sharma',28);
Query OK, 1 row affected (0.01 sec)


---Multiple Unique Keys---
CREATE TABLE employee
     (
     id INT UNIQUE KEY,
     firstname varchar(20),
     lastname varchar(20),
     age int NOT NULL,
     UNIQUE KEY(firstname,lastname)
     );


mysql> desc employee;
+-----------+-------------+------+-----+---------+-------+
| Field     | Type        | Null | Key | Default | Extra |
+-----------+-------------+------+-----+---------+-------+
| id        | int(11)     | YES  | UNI | NULL    |       |
| firstname | varchar(20) | YES  | MUL | NULL    |       |
| lastname  | varchar(20) | YES  |     | NULL    |       |
| age       | int(11)     | NO   |     | NULL    |       |
+-----------+-------------+------+-----+---------+-------+


mysql> INSERT INTO employee values(1,'kapil','sharma',28);
Query OK, 1 row affected (0.02 sec)

mysql> INSERT INTO employee values(1,'kapil','sharma',28);
ERROR 1062 (23000): Duplicate entry '1' for key 'id'


INSERT INTO employee values(null,'kapil','sharma',28);
ERROR 1062 (23000): Duplicate entry 'kapil-sharma' for key 'firstname'

INSERT INTO employee values(null,'kashu','sharma',28);
Query OK, 1 row affected (0.01 sec)

mysql> select* from employee;
+------+-----------+----------+-----+
| id   | firstname | lastname | age |
+------+-----------+----------+-----+
|    1 | kapil     | sharma   |  28 |
| NULL | kashu     | sharma   |  28 |
+------+-----------+----------+-----+
2 rows in set (0.00 sec)

mysql> INSERT INTO employee values(null,'kashu','sharma',28);
ERROR 1062 (23000): Duplicate entry 'kashu-sharma' for key 'firstname'

======================================================================================================================================================

                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      CRUD                        ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

CREATE-INSERT
READ-SELECT
UPDATE-UPDATE
DELETE-DELETE


mysql> drop database trendy;
Query OK, 1 row affected (0.06 sec)

mysql> create database trendytech;
Query OK, 1 row affected (0.00 sec)

mysql> use trendytech;
Database changed

CREATE TABLE employee
     (
     id INT PRIMARY KEY,
     firstname varchar(20) NOT NULL,
     middlename varchar(20),
     lastname varchar(20) NOT NULL,
     age int NOT NULL,
     salary INT NOT NULL,
     location varchar(20) NOT NULL DEFAULT 'banglore'
     );

mysql> desc employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(20) | NO   |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | NO   |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | NO   |     | NULL     |       |
| location   | varchar(20) | NO   |     | banglore |       |
+------------+-------------+------+-----+----------+-------+


INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(1,'rajesh','sharma',28,1000);
INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(2,'kapil','sharma',30,2000);
INSERT INTO employee(id,firstname,lastname,age,salary) VALUES(3,'Maneesh','sharma',32,3000);


                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                     SELECT                       ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


---Select all colunns---
mysql> select* from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   2000 | banglore |
|  3 | Maneesh   | NULL       | sharma   |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+

---Selecting some columns---
SELECT firstname,lastname from employee;

mysql> SELECT firstname,lastname from employee;
+-----------+----------+
| firstname | lastname |
+-----------+----------+
| rajesh    | sharma   |
| kapil     | sharma   |
| Maneesh   | sharma   |
+-----------+----------+


                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      WHERE                       ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The WHERE clause is used to filter records.It is used to extract only those records that fulfill a specified condition.

mysql> SELECT*FROM employee WHERE age>29;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  2 | kapil     | NULL       | sharma   |  30 |   2000 | banglore |
|  3 | Maneesh   | NULL       | sharma   |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+
2 rows in set (0.00 sec)

mysql> SELECT*FROM employee WHERE firstname='maneesh';
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  3 | Maneesh   | NULL       | sharma   |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+
(where caluse is not sensitive because we have given firstname as maneesh but in table it is Maneesh).

TO make where clause case sensitive, we can use keyword binary.

mysql> SELECT*FROM employee WHERE binary firstname='maneesh';
Empty set (0.00 sec)

---Alias---
If you want to select something as other name.(Used to give a table or a column in a table temporary name).
SELECT firstname as name,lastname as surname from employee;
+---------+---------+
| name    | surname |
+---------+---------+
| rajesh  | sharma  |
| kapil   | sharma  |
| Maneesh | sharma  |
+---------+---------+

                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      UPDATE                      ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


mysql> select* from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   2000 | banglore |
|  3 | Maneesh   | NULL       | sharma   |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+


---Updating a specific record---
UPDATE employee SET lastname='sinha' WHERE firstname='maneesh';
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   2000 | banglore |
|  3 | Maneesh   | NULL       | sinha    |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+
3 rows in set (0.00 sec)


UPDATE employee SET location='delhi' WHERE firstname='kapil';

mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   1000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   2000 | delhi    |
|  3 | Maneesh   | NULL       | sinha    |  32 |   3000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+


UPDATE employee SET location='delhi';
It will update entire table by matching all records as there is no where clause.

UPDATE employee SET salary=salary+5000;
mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   6000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   7000 | delhi    |
|  3 | Maneesh   | NULL       | sinha    |  32 |   8000 | banglore |
+----+-----------+------------+----------+-----+--------+----------+


---Use of logical and ,or operator---

UPDATE employee SET location='bombay' where firstname='maneesh' and lastname='sinha';

mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   6000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   7000 | delhi    |
|  3 | Maneesh   | NULL       | sinha    |  32 |   8000 | bombay   |
+----+-----------+------------+----------+-----+--------+----------+



                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      DELETE                      ++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

If a person is leaving the company we want to delete its data.

DELETE from employee WHERE id=3;
Query OK, 1 row affected (0.09 sec)

mysql> SELECT*from employee;
+----+-----------+------------+----------+-----+--------+----------+
| id | firstname | middlename | lastname | age | salary | location |
+----+-----------+------------+----------+-----+--------+----------+
|  1 | rajesh    | NULL       | sharma   |  28 |   6000 | banglore |
|  2 | kapil     | NULL       | sharma   |  30 |   7000 | delhi    |
+----+-----------+------------+----------+-----+--------+----------+
2 rows in set (0.00 sec)

---Everything will be deleted---
DELETE from employee.


                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                                              ++++                      ALTER                     ++++++ 
                                              ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Suppose I want to change the structure of the table like firstname is very large and I want to lower it,add more field to table,change datatype.
Unlike update which deals with data manipulation, Alter is used to deal with structure of table.

mysql> desc employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(20) | NO   |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | NO   |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | NO   |     | NULL     |       |
| location   | varchar(20) | NO   |     | banglore |       |
+------------+-------------+------+-----+----------+-------+


ALTER table employee ADD column jobtitle varchar(50);
Query OK, 0 rows affected (0.35 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(20) | NO   |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | NO   |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | NO   |     | NULL     |       |
| location   | varchar(20) | NO   |     | banglore |       |
| jobtitle   | varchar(50) | YES  |     | NULL     |       |
+------------+-------------+------+-----+----------+-------+


mysql> ALTER table employee DROP column jobtitle;
Query OK, 0 rows affected (0.19 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> desc employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(20) | NO   |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | NO   |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | NO   |     | NULL     |       |
| location   | varchar(20) | NO   |     | banglore |       |
+------------+-------------+------+-----+----------+-------+

mysql> ALTER TABLE employee modify column firstname varchar(30);
Query OK, 0 rows affected (0.28 sec)
Records: 0  Duplicates: 0  Warnings: 0


mysql> desc  employee;
+------------+-------------+------+-----+----------+-------+
| Field      | Type        | Null | Key | Default  | Extra |
+------------+-------------+------+-----+----------+-------+
| id         | int(11)     | NO   | PRI | NULL     |       |
| firstname  | varchar(30) | YES  |     | NULL     |       |
| middlename | varchar(20) | YES  |     | NULL     |       |
| lastname   | varchar(20) | NO   |     | NULL     |       |
| age        | int(11)     | NO   |     | NULL     |       |
| salary     | int(11)     | NO   |     | NULL     |       |
| location   | varchar(20) | NO   |     | banglore |       |
+------------+-------------+------+-----+----------+-------+
7 rows in set (0.00 sec)

dropping a primary entry

mysql> ALTER TABLE employee DROP PRIMARY KEY;
Query OK, 2 rows affected (0.51 sec)
Records: 2  Duplicates: 0  Warnings: 0


mysql> ALTER TABLE employee ADD PRIMARY KEY(id);
Query OK, 0 rows affected (0.21 sec)
Records: 0  Duplicates: 0  Warnings: 0

DDL(Data Definition Language) VS DML(Data Manipulation Language)

DDL-Consists of SQL commands which is used to define the database schema(deals with table structure).
Create,Alter,Drop and many more.

DML-Here we deal with the data directly(we change the data here).
Insert,Update,Delete


---Truncate---
TRUNCATE table employee;      --------------------\
DELETE FROM employee;       ----------------------/ Same work, but Truncate is a DDL Command.

when you do delete it removes records individually one by one(it has to do something with data itself).
when we are using truncate,it drops table and recreate it.

Truncate is more efficient as it is quick when records are more.

mysql> truncate table employee;
Query OK, 0 rows affected (0.17 sec)

mysql> select*from employee;
Empty set (0.00 sec)